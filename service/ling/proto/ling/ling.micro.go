// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ling/ling.proto

package go_micro_srv_ling

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Ling service

type LingService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Ling_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Ling_PingPongService, error)
}

type lingService struct {
	c    client.Client
	name string
}

func NewLingService(name string, c client.Client) LingService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.ling"
	}
	return &lingService{
		c:    c,
		name: name,
	}
}

func (c *lingService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ling.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lingService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Ling_StreamService, error) {
	req := c.c.NewRequest(c.name, "Ling.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &lingServiceStream{stream}, nil
}

type Ling_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type lingServiceStream struct {
	stream client.Stream
}

func (x *lingServiceStream) Close() error {
	return x.stream.Close()
}

func (x *lingServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lingServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lingServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lingService) PingPong(ctx context.Context, opts ...client.CallOption) (Ling_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Ling.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &lingServicePingPong{stream}, nil
}

type Ling_PingPongService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type lingServicePingPong struct {
	stream client.Stream
}

func (x *lingServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *lingServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lingServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lingServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *lingServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ling service

type LingHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Ling_StreamStream) error
	PingPong(context.Context, Ling_PingPongStream) error
}

func RegisterLingHandler(s server.Server, hdlr LingHandler, opts ...server.HandlerOption) error {
	type ling interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Ling struct {
		ling
	}
	h := &lingHandler{hdlr}
	return s.Handle(s.NewHandler(&Ling{h}, opts...))
}

type lingHandler struct {
	LingHandler
}

func (h *lingHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.LingHandler.Call(ctx, in, out)
}

func (h *lingHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.LingHandler.Stream(ctx, m, &lingStreamStream{stream})
}

type Ling_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type lingStreamStream struct {
	stream server.Stream
}

func (x *lingStreamStream) Close() error {
	return x.stream.Close()
}

func (x *lingStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lingStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lingStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *lingHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.LingHandler.PingPong(ctx, &lingPingPongStream{stream})
}

type Ling_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type lingPingPongStream struct {
	stream server.Stream
}

func (x *lingPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *lingPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *lingPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *lingPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *lingPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
